1. Single responsibility principle Принцип единственной ответственности
2. Open-closed principle Принцип открытости/закрытости
3. Liskov substitution principle Принцип подстановки Лисков
4. Interface segregation principle Принцип разделения интерфейса
5. Dependency inversion principle Принцип инверсии зависимостей

Single responsibility principle
Принцип гласит, что может быть только
одна причина, приводящая к изменению класса. Другими словами, каждый класс должен иметь только одну ответственность,
которая должна быть инкапсулирована
в этом классе.
- тестируемость; - читаемость;
- короткое и понятное описание класса;
- простота сопровождения.

Open-closed principle
классы должны быть открыты для расширения и одновременно закрыты для модификации. Иными словами, должна быть возможность добавлять новые свойства и расширять класс без изменения внутренней реализации существующих свойств.
«закрыт для модификации» «Открыт для расширений»

Liskov substitution principle
Требует возможности использования любых порожденных классов на месте родительских. При этом они должны обладать
тем же поведением, что и родительские классы, без внесения изменений.
Этот принцип гарантирует, что порожденный класс не изменяет определение типа родительского и его поведение.

Interface segregation principle
Клиенты не должны реализовывать интерфейсы, которые они не используют.
Данный принцип требует разделения «толстых» интерфейсов на несколько специализированных, связанных общей функциональностью.

Dependency inversion principle
Принцип инверсии зависимостей
- модули высокого уровня не должны зависеть от модулей нижнего уровня.
И те, и другие должны зависеть от абстракций.
- абстракции не должны зависеть от деталей.
Детали должны зависеть от абстракций.